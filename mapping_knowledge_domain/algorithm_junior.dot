digraph algorithm { // 校赛及省赛水题难度
    node[shape=record]
    rankdir=LR

    basic[label="基本算法"];
    enumeration[label="枚举"];
    enumeration -> poj1753;
    enumeration -> poj2965;
    greedy[label="贪心"];
    greedy -> poj1328;
    greedy -> poj2109;
    greedy -> poj2586;
    dac[label="递归和分治法"];
    recursion[label="递推"];
    structuring_method[label="构造法"];
    structuring_method -> poj3295;
    simulation[label="模拟法"];
    simulation -> poj1068;
    simulation -> poj2632;
    simulation -> poj1573;
    simulation -> poj2993;
    simulation -> poj2996;

    basic -> enumeration;
    basic -> greedy;
    basic -> dac;
    basic -> recursion;
    basic -> structuring_method;
    basic -> simulation;


    graph_algorithm[label="图算法"];
    dfs_and_bfs[label="图的深度优先遍历和广度优先遍历"];
    shortest_path[label="最短路径算法"];
    bf[label="bellman-ford"];
    hd[label="heap+dijkstra"];
    shortest_path_algorithms[label="常用算法"];
    shortest_path_algorithms -> dijkstra;
    shortest_path_algorithms -> bf;
    shortest_path_algorithms -> floyd;
    shortest_path_algorithms -> hd;
    shortest_path -> shortest_path_algorithms;
    shortest_path_poj[label="习题"];
    shortest_path_poj -> poj1860;
    shortest_path_poj -> poj3259;
    shortest_path_poj -> poj1062;
    shortest_path_poj -> poj2253;
    shortest_path_poj -> poj1125;
    shortest_path_poj -> poj2240;
    shortest_path -> shortest_path_poj;
    minimal_spanning_tree[label="最小生成树算法"];
    minimal_spanning_tree_algorithms[label="常用算法"];
    minimal_spanning_tree_algorithms -> prim;
    minimal_spanning_tree_algorithms -> kruskal;
    minimal_spanning_tree -> minimal_spanning_tree_algorithms;
    minimal_spanning_tree_poj[label="习题"];
    minimal_spanning_tree_poj -> poj1789;
    minimal_spanning_tree_poj -> poj2485;
    minimal_spanning_tree_poj -> poj1258;
    minimal_spanning_tree_poj -> poj3026;
    minimal_spanning_tree -> minimal_spanning_tree_poj;
    topological_sort[label="拓扑排序"];
    topological_sort -> poj1094;
    maximum_bipartite_matching[label="二分图的最大匹配(匈牙利算法)"];
    maximum_bipartite_matching -> poj3041;
    maximum_bipartite_matching -> poj3020;
    maximum_flow[label="最大流的增广路算法(KM算法)"];
    maximum_flow -> poj1459;
    maximum_flow -> poj3436;

    graph_algorithm -> dfs_and_bfs;
    graph_algorithm -> shortest_path;
    graph_algorithm -> minimal_spanning_tree;
    graph_algorithm -> topological_sort;
    graph_algorithm -> maximum_bipartite_matching;
    graph_algorithm -> maximum_flow;


    data_structure[label="数据结构"];
    string[label="串"];
    string -> poj1035;
    string -> poj3080;
    string -> poj1936;
    sort[label="排序"];
    sort -> poj2388;
    sort -> poj2299;
    union_find_sets[label="简单并查集的应用"];
    hash_and_binary[label="哈希表和二分查找等高效查找法"];
    hash_and_binary -> poj3349;
    hash_and_binary -> poj3274;
    hash_and_binary -> POJ2151;
    hash_and_binary -> poj1840;
    hash_and_binary -> poj2002;
    hash_and_binary -> poj2503;
    huffman_tree[label="哈夫曼树"];
    huffman_tree -> poj3253;
    heap[label="堆"];
    trie[label="trie树"];
    trie -> poj2513;

    data_structure -> string;
    data_structure -> sort;
    data_structure -> union_find_sets;
    data_structure -> hash_and_binary;
    data_structure -> huffman_tree;
    data_structure -> heap;
    data_structure -> trie;

    simple_search[label="简单搜索"];
    dfs[label="深度优先搜索"];
    bfs[label="广度优先搜索"];
    search_prune[label="简单搜索技巧和剪枝"];
    dfs -> poj2488;
    dfs -> poj3083;
    dfs -> poj3009;
    dfs -> poj1321;
    dfs -> poj2251;
    bfs -> poj3278;
    bfs -> poj1426;
    bfs -> poj3126;
    bfs -> poj3087;
    bfs -> poj3414;

    search_prune -> poj2531;
    search_prune -> poj1416;
    search_prune -> poj2676;
    search_prune -> poj1129;

    simple_search -> dfs;
    simple_search -> bfs;
    simple_search -> search_prune;

    dynamic_programming[label="动态规划"];
    knapsack_problem[label="背包问题"];
    knapsack_problem -> poj1837;
    knapsack_problem -> poj1276;
    dp2[label="E[j]=opt\{D+w(i,j)\}"];
    dp2 -> poj3267;
    dp2 -> poj1836;
    dp2 -> poj1260;
    dp2 -> poj2533;
    lcs[label="最长公共子序列"];
    lcs -> poj3176;
    lcs -> poj1080;
    lcs -> poj1159;
    optimum_binary_retrieval_tree[label="最优二分检索树问题"];

    dynamic_programming -> knapsack_problem;
    dynamic_programming -> dp2;
    dynamic_programming -> lcs;
    dynamic_programming -> optimum_binary_retrieval_tree;

    maths[label="数学"];
    combinatorial_mathematics[label="组合数学"];
    combinatorial_mathematics -> 加法原理和乘法原理;
    combinatorial_mathematics -> 排列组合;
    combinatorial_mathematics -> 递推关系;
    combinatorial_mathematics_poj[label="习题"];
    combinatorial_mathematics_poj -> poj3252;
    combinatorial_mathematics_poj -> poj1850;
    combinatorial_mathematics_poj -> poj1019;
    combinatorial_mathematics_poj -> poj1942;
    combinatorial_mathematics -> combinatorial_mathematics_poj;
    number_theory[label="数论"];
    number_theory -> 素数与整除问题;
    number_theory -> 进制位;
    number_theory -> 同余模运算;
    number_theory_poj[label="习题"];
    number_theory_poj -> poj2635;
    number_theory_poj -> poj3292;
    number_theory_poj -> poj1845;
    number_theory_poj -> poj2115;
    number_theory -> number_theory_poj;
    computational_method[label="计算方法"];
    computational_method -> 二分法求解单调函数相关知识;
    computational_method_poj[label="习题"];
    computational_method_poj -> poj3273;
    computational_method_poj -> poj3258;
    computational_method_poj -> poj1905;
    computational_method_poj -> poj3122;
    computational_method -> computational_method_poj;
    maths -> combinatorial_mathematics;
    maths -> number_theory;
    maths -> computational_method;


    computational_geometry[label="计算几何学"];
    computational_geometry -> 几何公式;
    cross_dot_product[label="叉积和点积的运用"];
    cross_dot_product_apply[label="应用"];
    cross_dot_product_apply -> 线段相交的判定;
    cross_dot_product_apply -> 点到线段的距离;
    cross_dot_product_poj[label="习题"];
    cross_dot_product_poj -> poj2031;
    cross_dot_product_poj -> poj1039;
    cross_dot_product -> cross_dot_product_apply;
    cross_dot_product -> cross_dot_product_poj;
    polygon_determination[label="多边形相关判定"];
    polygon_determination -> poj1408;
    polygon_determination -> poj1584;
    convex_hull[label="凸包"];
    convex_hull -> poj2187;
    convex_hull -> poj1113;

    computational_geometry -> cross_dot_product;
    computational_geometry -> polygon_determination;
    computational_geometry -> convex_hull;


}